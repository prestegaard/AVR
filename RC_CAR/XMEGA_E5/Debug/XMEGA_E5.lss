
XMEGA_E5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa9  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000269  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057f  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
#include <util/delay.h>
#include "pwm.h"
int main(void)
{
    /* Replace with your application code */
	PORTA.DIR = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	80 93 00 06 	sts	0x0600, r24
	PORTC.DIR = 0xFF;
  ca:	80 93 40 06 	sts	0x0640, r24
	pwm_init();
  ce:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z8pwm_initv>
	//TCC4.CCA=902;

	sei();
  d2:	78 94       	sei
    while (1) 
    {

		TCC4.CCB=1024;
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	54 e0       	ldi	r21, 0x04	; 4
		//PORTA.OUT = (1<<2);
		_delay_ms(1000);
		PORTA.OUT = (1<<3);
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b6 e0       	ldi	r27, 0x06	; 6
  e0:	28 e0       	ldi	r18, 0x08	; 8
		TCC4.CCB=128;
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	90 e0       	ldi	r25, 0x00	; 0

	sei();
    while (1) 
    {

		TCC4.CCB=1024;
  e6:	42 a7       	std	Z+42, r20	; 0x2a
  e8:	53 a7       	std	Z+43, r21	; 0x2b
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	3f e7       	ldi	r19, 0x7F	; 127
  ec:	6a e1       	ldi	r22, 0x1A	; 26
  ee:	76 e0       	ldi	r23, 0x06	; 6
  f0:	31 50       	subi	r19, 0x01	; 1
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	70 40       	sbci	r23, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x2c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x36>
  fa:	00 00       	nop
		//PORTA.OUT = (1<<2);
		_delay_ms(1000);
		PORTA.OUT = (1<<3);
  fc:	14 96       	adiw	r26, 0x04	; 4
  fe:	2c 93       	st	X, r18
 100:	14 97       	sbiw	r26, 0x04	; 4
		TCC4.CCB=128;
 102:	82 a7       	std	Z+42, r24	; 0x2a
 104:	93 a7       	std	Z+43, r25	; 0x2b
 106:	3f e7       	ldi	r19, 0x7F	; 127
 108:	64 e8       	ldi	r22, 0x84	; 132
 10a:	7e e1       	ldi	r23, 0x1E	; 30
 10c:	31 50       	subi	r19, 0x01	; 1
 10e:	60 40       	sbci	r22, 0x00	; 0
 110:	70 40       	sbci	r23, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x48>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x52>
 116:	00 00       	nop
 118:	e6 cf       	rjmp	.-52     	; 0xe6 <main+0x22>

0000011a <_Z8pwm_initv>:
#include <avr/io.h>
//#include <avr/interrupts.h>
#include "pwm.h"

void pwm_init(){
	TCC4.CTRLA = 0;
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f8 e0       	ldi	r31, 0x08	; 8
 11e:	10 82       	st	Z, r1
	TCC4.CTRLB |=  3; //Single slope PWM
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	83 60       	ori	r24, 0x03	; 3
 124:	81 83       	std	Z+1, r24	; 0x01
	TCC4.CTRLE =TC4_LCCAMODE0_bm|TC4_LCCBMODE0_bm|TC4_LCCCMODE0_bm|TC4_LCCDMODE0_bm;
 126:	85 e5       	ldi	r24, 0x55	; 85
 128:	84 83       	std	Z+4, r24	; 0x04
	TCC4.CNT=0;
 12a:	10 a2       	std	Z+32, r1	; 0x20
 12c:	11 a2       	std	Z+33, r1	; 0x21
	TCC4.PER = 1024;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	86 a3       	std	Z+38, r24	; 0x26
 134:	97 a3       	std	Z+39, r25	; 0x27
	TCC4.CCA=0;
 136:	10 a6       	std	Z+40, r1	; 0x28
 138:	11 a6       	std	Z+41, r1	; 0x29
	TCC4.CCB=0;
 13a:	12 a6       	std	Z+42, r1	; 0x2a
 13c:	13 a6       	std	Z+43, r1	; 0x2b
	TCC4.CCC=0;
 13e:	14 a6       	std	Z+44, r1	; 0x2c
 140:	15 a6       	std	Z+45, r1	; 0x2d
	TCC4.CCD=0;
 142:	16 a6       	std	Z+46, r1	; 0x2e
 144:	17 a6       	std	Z+47, r1	; 0x2f
	TCC4.CTRLA = 5;
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
